{"version":3,"sources":["Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_animated","Home","useEffect","chart","am4maps","geodata","am4geodata_worldUltra","e","raiseCriticalError","Error","projection","Miller","polygonSeries","series","push","useGeodata","polygonTemplate","mapPolygons","template","strokeOpacity","stroke","fillOpacity","tooltipText","states","create","properties","console","log","Fragment","id","style","width","height","position","top","left","display","justifyContent","alignItems","backgroundColor","zIndex","Typography","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0ZAUAA,IAAiBC,KA6CFC,MA3Cf,WA+BI,OA7BAC,qBAAU,WACN,IAAIC,EAAQJ,IAAe,WAAYK,KAEvC,IACID,EAAME,QAAUC,IAEpB,MAAOC,GACHJ,EAAMK,mBAAmB,IAAIC,MAAM,uNAGvCN,EAAMO,WAAa,IAAIN,IAAoBO,OAE3C,IAAIC,EAAgBT,EAAMU,OAAOC,KAAK,IAAIV,KAC1CQ,EAAcG,YAAa,EAG3B,IAAIC,EAAkBJ,EAAcK,YAAYC,SAChDF,EAAgBG,cAAgB,EAChCH,EAAgBI,OAASrB,IAAc,WACvCiB,EAAgBK,YAAc,EAC9BL,EAAgBM,YAAc,SAEbN,EAAgBO,OAAOC,OAAO,SACpCC,WAAWJ,YAAc,IAEpCK,QAAQC,IAAIxB,KAEb,IAGH,kBAAC,IAAMyB,SAAP,KACI,yBAAKC,GAAG,WAAWC,MAAO,CAACC,MAAO,QAASC,OAAO,WAClD,yBAAKH,GAAG,gBAAgBC,MAAO,CAACG,SAAU,WAAYC,IAAK,OAAOC,KAAM,IAAKJ,MAAO,QAASC,OAAO,MAAOI,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,gBAAiB,4BAA6BC,OAAQ,IAC9N,kBAACC,EAAA,EAAD,eCnCGC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.c54be9cc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport * as am4core from \"@amcharts/amcharts4/core\"\nimport * as am4maps from \"@amcharts/amcharts4/maps\"\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\nimport am4geodata_worldUltra from \"@amcharts/amcharts4-geodata/worldUltra\"\nimport Neighbours from '../Utils/neighbours.json'\nimport Variables from '../Utils/Variables.json'\nimport { Typography } from '@material-ui/core'\n\nam4core.useTheme(am4themes_animated)\n\nfunction Home () {\n\n    useEffect(() => {\n        var chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n\n        try {\n            chart.geodata = am4geodata_worldUltra;\n        }\n        catch (e) {\n            chart.raiseCriticalError(new Error(\"Map geodata could not be loaded. Please download the latest <a href=\\\"https://www.amcharts.com/download/download-v4/\\\">amcharts geodata</a> and extract its contents into the same directory as your amCharts files.\"));\n        }\n\n        chart.projection = new am4maps.projections.Miller();\n\n        var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n        polygonSeries.useGeodata = true;\n\n        // country area look and behavior\n        var polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.strokeOpacity = 1\n        polygonTemplate.stroke = am4core.color(\"#ffffff\")\n        polygonTemplate.fillOpacity = 1\n        polygonTemplate.tooltipText = \"{name}\"\n\n        var hoverState = polygonTemplate.states.create(\"hover\")\n        hoverState.properties.fillOpacity = 0.75;\n\n        console.log(chart)\n\n    }, [])\n\n    return (\n    <React.Fragment>\n        <div id=\"chartdiv\" style={{width: \"100vw\", height:\"100vh\"}}></div>\n        <div id=\"arenaControls\" style={{position: 'absolute', top: '93vh',left: '0', width: \"100vw\", height:\"7vh\", display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(255, 255, 255, 0.75)', zIndex: 5}}>\n            <Typography>\n                Day\n            </Typography>\n        </div>\n    </React.Fragment>\n    );\n}\n\nexport default Home","import React from 'react';\nimport './App.css';\nimport Home from './Components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}